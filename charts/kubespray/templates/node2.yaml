---
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: node2-{{ include "kubespray.fullname" . }}
  labels:
    app: kubespray
    cluster: kubespray
    kubevirt.io/os: linux
spec:
  running: true
  dataVolumeTemplates:
  - metadata:
      name: node2-pvc-vda
      annotations:
        kubevirt.io/provisionOnNode: node1
      labels:
        app: kubespray
    spec:
      source:
        registry:
          url: "docker://{{ .Values.nodes.masters.source.image }}:{{ .Values.nodes.masters.source.tag }}"
          imagePullPolicy: {{ .Values.nodes.imagePullPolicy }}
      accessModes:
      - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
      capacity:
        storage: "{{ .Values.nodes.masters.storage.vda.size }}"
      config:
        featureGates:
        - HonorWaitForFirstConsumer
      pvc:
        accessModes:
        - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
        resources:
          requests:
            storage: "{{ .Values.nodes.masters.storage.vda.size }}"
        storageClassName: "{{ .Values.nodes.masters.storage.vda.class }}"
      storageClassName: "{{ .Values.nodes.masters.storage.vda.class }}"
      volumeMode: {{ .Values.nodes.masters.storage.vda.volumeMode }}
      persistentVolumeReclaimPolicy: Delete
  - metadata:
      name: node2-pvc-vdb
      annotations:
        kubevirt.io/provisionOnNode: node1
      labels:
        app: kubespray
    spec:
      source:
        blank: {}
      accessModes:
      - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
      capacity:
        storage: "{{ .Values.nodes.masters.storage.vdb.size }}"
      config:
        featureGates:
        - HonorWaitForFirstConsumer
      pvc:
        accessModes:
        - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
        resources:
          requests:
            storage: "{{ .Values.nodes.masters.storage.vdb.size }}"
        storageClassName: "{{ .Values.nodes.masters.storage.vdb.class }}"
      storageClassName: "{{ .Values.nodes.masters.storage.vdb.class }}"
      volumeMode: {{ .Values.nodes.masters.storage.vdb.volumeMode }}
      persistentVolumeReclaimPolicy: Delete
  - metadata:
      name: node2-pvc-vdc
      annotations:
        kubevirt.io/provisionOnNode: node1
      labels:
        app: kubespray
    spec:
      source:
        blank: {}
      accessModes:
      - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
      capacity:
        storage: "{{ .Values.nodes.masters.storage.vdc.size }}"
      config:
        featureGates:
        - HonorWaitForFirstConsumer
      pvc:
        accessModes:
        - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
        resources:
          requests:
            storage: "{{ .Values.nodes.masters.storage.vdc.size }}"
        storageClassName: "{{ .Values.nodes.masters.storage.vdc.class }}"
      storageClassName: "{{ .Values.nodes.masters.storage.vdc.class }}"
      volumeMode: {{ .Values.nodes.masters.storage.vdc.volumeMode }}
      persistentVolumeReclaimPolicy: Delete
  - metadata:
      name: node2-pvc-vdd
      annotations:
        kubevirt.io/provisionOnNode: node1
      labels:
        app: kubespray
    spec:
      source:
        blank: {}
      accessModes:
      - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
      capacity:
        storage: "{{ .Values.nodes.masters.storage.vdd.size }}"
      config:
        featureGates:
        - HonorWaitForFirstConsumer
      pvc:
        accessModes:
        - "{{ .Values.nodes.masters.storage.vda.accessModes }}"
        resources:
          requests:
            storage: "{{ .Values.nodes.masters.storage.vdd.size }}"
        storageClassName: "{{ .Values.nodes.masters.storage.vdd.class }}"
      storageClassName: "{{ .Values.nodes.masters.storage.vdd.class }}"
      volumeMode: {{ .Values.nodes.masters.storage.vdd.volumeMode }}
      persistentVolumeReclaimPolicy: Delete
  template:
    spec:
      evictionStrategy: LiveMigrate
      nodeSelector:
        node-role.kubernetes.io/kubevirt: ""
      domain:
        clock:
          timer: {}
          utc: {}
        cpu:
          model: {{ .Values.nodes.masters.cpu.model }}
          threads: {{ .Values.nodes.masters.cpu.cores }}
          dedicatedCpuPlacement: false
          sockets: 1
          cores: 1
        resources:
          requests:
            memory: {{ .Values.nodes.masters.memory }}
            devices.kubevirt.io/kvm: "1"
          limits:
            memory: {{ .Values.nodes.masters.memory }}
        machine:
          type: pc-q35-rhel8.3.0
        devices:
          autoattachPodInterface: false
          autoattachSerialConsole: true
          autoattachGraphicsDevice: true
          networkInterfaceMultiqueue: true
          rng: {}
          disks:
            - name: node2-disk-vda
              bootOrder: 1
              disk:
                bus: virtio
            - name: node2-disk-vdb
              disk:
                bus: virtio
            - name: node2-disk-vdc
              disk:
                bus: virtio
            - name: node2-disk-vdd
              disk:
                bus: virtio
            - name: cloudinitdisk
              disk:
                bus: virtio
          interfaces:
          - name: eth0
            model: virtio
#           macAddress: 02:d2:76:00:00:20
            bridge: {}
      hostname: node2
      networks:
      - name: eth0
        multus:
          networkName: '{{ include "kubespray.fullname" . }}.brvpc{{ .Values.network.host_interface }}.{{ .Values.network.vlan_id }}'
      terminationGracePeriodSeconds: 0
      accessCredentials:
      - sshPublicKey:
          source:
            secret:
              secretName: {{ .Values.user.credentials.sshpubkeysecret }}
          propagationMethod:
            qemuGuestAgent:
              users:
              - "{{ .Values.user.name }}"
      volumes:
        - name: node2-disk-vda
          dataVolume:
            name: node2-pvc-vda
        - name: node2-disk-vdb
          dataVolume:
            name: node2-pvc-vdb
        - name: node2-disk-vdc
          dataVolume:
            name: node2-pvc-vdc
        - name: node2-disk-vdd
          dataVolume:
            name: node2-pvc-vdd
        - name: cloudinitdisk
          cloudInitNoCloud:
            secretRef:
              name: fedora-cloudinit-userdata
            networkDataSecretRef:
              name: node2-cloudinit-networkdata
